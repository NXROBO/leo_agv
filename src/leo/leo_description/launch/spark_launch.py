# Copyright (c) 2022 NXROBO
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#        Author: litian.zhuang   
#        Email: <litian.zhuang@nxrobo.com>  
#

import os
import launch
from ament_index_python.packages import get_package_share_directory

from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument, OpaqueFunction
from launch.conditions import IfCondition
from launch.substitutions import (
    LaunchConfiguration,
    PathJoinSubstitution,
)
from launch_ros.actions import Node
from launch_ros.substitutions import FindPackageShare

from typing import List, Optional, Text, Union

from launch import LaunchContext, SomeSubstitutionsType
from launch.actions import DeclareLaunchArgument
from launch.substitutions import (
    Command,
    FindExecutable,
    LaunchConfiguration,
    PathJoinSubstitution,
    TextSubstitution,
)
from launch_ros.substitutions import FindPackageShare


class DeclareSparkRobotDescriptionLaunchArgument(DeclareLaunchArgument):
    """Generate a URDF of a robot through a modified DeclareLaunchArgument object."""

    def __init__(
        self,
        *,
        default_value: Optional[SomeSubstitutionsType] = Command([
            FindExecutable(name='xacro'), ' ',
            PathJoinSubstitution([
                FindPackageShare('spark_description'),
                'urdf',
                'spark_340'
            ]), '.urdf.xacro ',
            'enable_arm_tel:=', LaunchConfiguration('enable_arm_tel'), ' ',
            'arm_type_tel:=', LaunchConfiguration('arm_type_tel'), ' ',
            'camera_type_tel:=', LaunchConfiguration('camera_type_tel'), ' ',
            'lidar_type_tel:=', LaunchConfiguration('lidar_type_tel'), ' ',
        ]),
        **kwargs
    ) -> None:
        """
        Construct the modified DeclareLaunchArgument object.
        :param default_value: The default model given to the parent DeclareLaunchArgument; if you
            want to override this value, it must follow the convention in this object's source
        """
        super().__init__(
            name='robot_description',
            default_value=default_value,
            description=(
                'URDF of the robot; this is typically generated by the xacro command.'
            ),
            choices=None,
            **kwargs
        )


def declare_spark_robot_description_launch_arguments(
    *,
    enable_arm_tel: Text = 'false',
    arm_type_tel: Text = 'uarm',
    camera_type_tel: Text = 'd435',
    lidar_type_tel: Text = 'ydlidar_g6',
) -> List[DeclareLaunchArgument]:
    """
    Return the `robot_description` DeclareLaunchArgument and its requried children.
    DeclareLaunchArgument objects:
        - `enable_arm_tel`
        - `arm_type_tel`
        - `camera_type_tel`
        - `lidar_type_tel`
    :details: Include this in your LaunchDescription by appending its output to the list of
        DeclareLaunchArguments
    """
    return [
        DeclareLaunchArgument(
            'enable_arm_tel',
            default_value=TextSubstitution(text=enable_arm_tel),
            choices=('true', 'false'),
            description=(
                "name of the 'root' link on the arm; typically `base_link`, but can be changed if "
                'attaching the arm to a mobile base that already has a `base_link` frame.'
            ),
        ),
        DeclareLaunchArgument(
            'arm_type_tel',
            default_value=TextSubstitution(text=arm_type_tel),
            description=(
                'if `true`, the default gripper is included in the `robot_description` parameter; '
                'if `false`, it is left out; set to `false` if not using the default gripper.'
            ),
        ),
        DeclareLaunchArgument(
            'camera_type_tel',
            default_value=camera_type_tel,
            description=(
                'if `true`, the AR tag mount is included in the `robot_description` parameter; if '
                '`false`, it is left out; set to `true` if using the AR tag mount in your project.'
            ),
        ),
        DeclareLaunchArgument(
            'lidar_type_tel',
            default_value=lidar_type_tel,
            description=(
                'if `true`, the gripper_bar link is included in the `robot_description` parameter;'
                ' if `false`, the gripper_bar and finger links are not loaded. Set to `false` if '
                'you have a custom gripper attachment.'
            ),
        ),
        DeclareSparkRobotDescriptionLaunchArgument(),
    ]


# def determine_use_sim_time_param(
#     context: LaunchContext,
#     hardware_type_launch_arg: LaunchConfiguration
# ) -> Union[TextSubstitution, LaunchConfiguration]:
#     """
#     Set `use_sim_time` parameter to `true` if using simulated hardware.
#     :param context: The launch context
#     :param hardware_type: The `hardware_type` LaunchConfiguration
#     :return: True if hardware is simulated, the `use_sim_time` LaunchConfiguration otherwise
#     """
#     if hardware_type_launch_arg.perform(context) in ('gz_classic'):
#         print('000000000')
#         return TextSubstitution(text='true')
#     else:
#         print('111111111111')
#         return LaunchConfiguration('use_sim_time')

#==================================================================================

def launch_setup(context, *args, **kwargs):
    enable_arm_tel = LaunchConfiguration('enable_arm_tel')
    arm_type_tel = LaunchConfiguration('arm_type_tel')
    camera_type_tel = LaunchConfiguration('camera_type_tel')
    lidar_type_tel = LaunchConfiguration('lidar_type_tel')
    robot_description_launch_arg = LaunchConfiguration('robot_description')
    # hardware_type_launch_arg = LaunchConfiguration('hardware_type')

    # # sets use_sim_time parameter to 'true' if using gazebo hardware
    # use_sim_time_param = determine_use_sim_time_param(
    #     context=context,
    #     hardware_type_launch_arg=hardware_type_launch_arg
    # )

    robot_state_publisher_node = Node(
        package='robot_state_publisher',
        executable='robot_state_publisher',
        parameters=[{
            'robot_description': robot_description_launch_arg,
        #    'use_sim_time': use_sim_time_param,
        }],
        output={'both': 'log'},
    )

    rviz_config_dir = os.path.join(get_package_share_directory('spark_description'), 'rviz', 'urdf.rviz')


    rviz2_node = Node(
        package='rviz2',
        executable='rviz2',
        name='rviz2',
        arguments=[
            '-d', rviz_config_dir,
        ],
        # parameters=[{
        #     'use_sim_time': use_sim_time_param,
        # }],
        output={'both': 'log'},
    )

    return [
        robot_state_publisher_node,
        rviz2_node,
    ]


def generate_launch_description():
    declared_arguments = []
    declared_arguments.append(
        DeclareLaunchArgument(
            'enable_arm_tel',
            default_value='false',
            #choices=get_interbotix_xsarm_models(),
            description='enable the arm , true or false.'
        )
    )
    declared_arguments.append(
        DeclareLaunchArgument(
            'arm_type_tel',
            default_value='uarm',
            description=(
                'model type of the spark Arm such as `uarm` or `sgr532`.'
            ),
        )
    )
    declared_arguments.append(
        DeclareLaunchArgument(
            'camera_type_tel',
            default_value='d435',
            description='model type of the spark Arm such as `d435` or `astra`.',
        )
    )
    declared_arguments.append(
        DeclareLaunchArgument(
            'lidar_type_tel',
            default_value='ydlidar_g6',
            description='launches the joint_state_publisher node.',
        )
    )

    declared_arguments.extend(
        declare_spark_robot_description_launch_arguments(),
    )

    return LaunchDescription(declared_arguments + [OpaqueFunction(function=launch_setup)])
